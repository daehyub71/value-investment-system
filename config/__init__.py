"""
Î©îÏù∏ ÏÑ§Ï†ï Í¥ÄÎ¶¨Ïûê
Î™®Îì† ÏÑ§Ï†ï ÌååÏùºÏùÑ ÌÜµÌï©ÌïòÏó¨ Í¥ÄÎ¶¨ÌïòÎäî Ï§ëÏïô ÏßëÏ§ëÏãù ÏÑ§Ï†ï Í¥ÄÎ¶¨Ïûê
"""

import os
import sys
from pathlib import Path
from typing import Dict, Any, List, Optional
from dotenv import load_dotenv

# ÌôòÍ≤ΩÎ≥ÄÏàò Î°úÎìú
load_dotenv()

# ÌîÑÎ°úÏ†ùÌä∏ Î£®Ìä∏ Í≤ΩÎ°ú Ï∂îÍ∞Ä
PROJECT_ROOT = Path(__file__).parent.parent
sys.path.append(str(PROJECT_ROOT))

# ÏÑ§Ï†ï Î™®Îìà ÏûÑÌè¨Ìä∏
try:
    from config.settings import settings
    from config.api_config import api_config
    from config.database_config import database_config
    from config.logging_config import logger_manager
    from config.kis_api_config import get_kis_config
except ImportError as e:
    print(f"ÏÑ§Ï†ï Î™®Îìà ÏûÑÌè¨Ìä∏ Ïã§Ìå®: {e}")
    print("ÌîÑÎ°úÏ†ùÌä∏ ÎîîÎ†âÌÜ†Î¶¨ Íµ¨Ï°∞Î•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.")
    sys.exit(1)

class ConfigManager:
    """ÌÜµÌï© ÏÑ§Ï†ï Í¥ÄÎ¶¨Ïûê"""
    
    def __init__(self):
        self.project_root = PROJECT_ROOT
        self.settings = settings
        self.api_config = api_config
        self.database_config = database_config
        self.logger_manager = logger_manager
        
        # ÏÑ§Ï†ï Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
        self.validation_errors = self._validate_all_configs()
        
        # Ï¥àÍ∏∞Ìôî Î°úÍ∑∏
        self.logger = self.logger_manager.get_logger('ConfigManager')
        self.logger.info("ÏÑ§Ï†ï Í¥ÄÎ¶¨Ïûê Ï¥àÍ∏∞Ìôî ÏôÑÎ£å")
    
    def _validate_all_configs(self) -> List[str]:
        """Î™®Îì† ÏÑ§Ï†ï Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨"""
        errors = []
        
        # Í∏∞Î≥∏ ÏÑ§Ï†ï Í≤ÄÏ¶ù
        errors.extend(self.settings.validate_config())
        
        # API ÏÑ§Ï†ï Í≤ÄÏ¶ù
        errors.extend(self.api_config.validate_all_configs())
        
        # ÌïÑÏàò ÎîîÎ†âÌÜ†Î¶¨ Í≤ÄÏ¶ù
        required_dirs = [
            self.project_root / 'data',
            self.project_root / 'logs',
            self.project_root / 'data' / 'databases'
        ]
        
        for directory in required_dirs:
            if not directory.exists():
                errors.append(f"ÌïÑÏàò ÎîîÎ†âÌÜ†Î¶¨Í∞Ä ÏóÜÏäµÎãàÎã§: {directory}")
        
        return errors
    
    def get_config_summary(self) -> Dict[str, Any]:
        """ÏÑ§Ï†ï ÏöîÏïΩ Ï†ïÎ≥¥ Î∞òÌôò"""
        return {
            'project_root': str(self.project_root),
            'environment': os.getenv('KIS_ENVIRONMENT', 'VIRTUAL'),
            'debug_mode': self.settings.dev_config['debug_mode'],
            'log_level': self.settings.logging_config['level'],
            'database_path': str(self.database_config.base_path),
            'api_configs': {
                'dart_configured': bool(self.api_config.dart['api_key']),
                'naver_news_configured': bool(self.api_config.naver_news['client_id']),
                'kis_configured': bool(self.api_config.kis['app_key']),
                'kis_environment': self.api_config.kis['environment']
            },
            'analysis_weights': self.settings.analysis_config['weights'],
            'validation_errors': self.validation_errors
        }
    
    def print_config_status(self):
        """ÏÑ§Ï†ï ÏÉÅÌÉú Ï∂úÎ†•"""
        print("\n" + "="*60)
        print("üöÄ Finance Data Vibe - ÏÑ§Ï†ï ÏÉÅÌÉú")
        print("="*60)
        
        summary = self.get_config_summary()
        
        # ÌîÑÎ°úÏ†ùÌä∏ Ï†ïÎ≥¥
        print(f"üìÅ ÌîÑÎ°úÏ†ùÌä∏ Í≤ΩÎ°ú: {summary['project_root']}")
        print(f"üîß ÌôòÍ≤Ω: {summary['environment']}")
        print(f"üêõ ÎîîÎ≤ÑÍ∑∏ Î™®Îìú: {'‚úÖ' if summary['debug_mode'] else '‚ùå'}")
        print(f"üìù Î°úÍ∑∏ Î†àÎ≤®: {summary['log_level']}")
        
        # API ÏÑ§Ï†ï ÏÉÅÌÉú
        print(f"\nüìä API ÏÑ§Ï†ï:")
        api_configs = summary['api_configs']
        print(f"  - DART API: {'‚úÖ ÏÑ§Ï†ïÎê®' if api_configs['dart_configured'] else '‚ùå ÎØ∏ÏÑ§Ï†ï'}")
        print(f"  - ÎÑ§Ïù¥Î≤Ñ Îâ¥Ïä§: {'‚úÖ ÏÑ§Ï†ïÎê®' if api_configs['naver_news_configured'] else '‚ùå ÎØ∏ÏÑ§Ï†ï'}")
        print(f"  - KIS API: {'‚úÖ ÏÑ§Ï†ïÎê®' if api_configs['kis_configured'] else '‚ùå ÎØ∏ÏÑ§Ï†ï'}")
        print(f"  - KIS ÌôòÍ≤Ω: {api_configs['kis_environment']}")
        
        # Î∂ÑÏÑù ÎπÑÏ§ë
        print(f"\nüìà Î∂ÑÏÑù ÎπÑÏ§ë:")
        weights = summary['analysis_weights']
        print(f"  - Í∏∞Î≥∏Î∂ÑÏÑù: {weights['fundamental']:.1%}")
        print(f"  - Í∏∞Ïà†Î∂ÑÏÑù: {weights['technical']:.1%}")
        print(f"  - Í∞êÏ†ïÎ∂ÑÏÑù: {weights['sentiment']:.1%}")
        
        # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï†ïÎ≥¥
        print(f"\nüíæ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§:")
        print(f"  - Ï†ÄÏû• Í≤ΩÎ°ú: {summary['database_path']}")
        
        db_info = self.database_config.get_all_database_info()
        for db_name, info in db_info.items():
            status = "‚úÖ Ï°¥Ïû¨" if info['exists'] else "‚ùå ÏóÜÏùå"
            print(f"  - {db_name}: {status} ({info['size']:,} bytes)")
        
        # Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ Í≤∞Í≥º
        if summary['validation_errors']:
            print(f"\n‚ùå ÏÑ§Ï†ï Ïò§Î•ò ({len(summary['validation_errors'])}Í∞ú):")
            for error in summary['validation_errors']:
                print(f"  - {error}")
        else:
            print(f"\n‚úÖ Î™®Îì† ÏÑ§Ï†ïÏù¥ Ïò¨Î∞îÎ•¥Í≤å Íµ¨ÏÑ±ÎêòÏóàÏäµÎãàÎã§!")
        
        print("="*60)
    
    def initialize_project(self) -> bool:
        """ÌîÑÎ°úÏ†ùÌä∏ Ï¥àÍ∏∞Ìôî"""
        try:
            self.logger.info("ÌîÑÎ°úÏ†ùÌä∏ Ï¥àÍ∏∞Ìôî ÏãúÏûë")
            
            # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞Ìôî
            db_results = self.database_config.create_all_databases()
            
            success_count = sum(1 for result in db_results.values() if result)
            total_count = len(db_results)
            
            self.logger.info(f"Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å: {success_count}/{total_count}")
            
            # ÏÑ§Ï†ï Ïú†Ìö®ÏÑ± Ïû¨Í≤ÄÏÇ¨
            self.validation_errors = self._validate_all_configs()
            
            if self.validation_errors:
                self.logger.warning(f"ÏÑ§Ï†ï Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ Ïã§Ìå®: {len(self.validation_errors)}Í∞ú Ïò§Î•ò")
                return False
            
            self.logger.info("ÌîÑÎ°úÏ†ùÌä∏ Ï¥àÍ∏∞Ìôî ÏÑ±Í≥µ")
            return True
            
        except Exception as e:
            self.logger.error(f"ÌîÑÎ°úÏ†ùÌä∏ Ï¥àÍ∏∞Ìôî Ïã§Ìå®: {e}")
            return False
    
    def get_dart_config(self) -> Dict[str, Any]:
        """DART API ÏÑ§Ï†ï Î∞òÌôò"""
        return self.api_config.dart
    
    def get_naver_news_config(self) -> Dict[str, Any]:
        """ÎÑ§Ïù¥Î≤Ñ Îâ¥Ïä§ API ÏÑ§Ï†ï Î∞òÌôò"""
        return self.api_config.naver_news
    
    def get_kis_config(self) -> Dict[str, Any]:
        """KIS API ÏÑ§Ï†ï Î∞òÌôò"""
        return self.api_config.kis
    
    def get_database_connection(self, db_name: str):
        """Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ Î∞òÌôò"""
        return self.database_config.get_connection(db_name)
    
    def get_logger(self, name: str):
        """Î°úÍ±∞ Î∞òÌôò"""
        return self.logger_manager.get_logger(name)
    
    def get_analysis_config(self) -> Dict[str, Any]:
        """Î∂ÑÏÑù ÏÑ§Ï†ï Î∞òÌôò"""
        return self.settings.analysis_config
    
    def get_buffett_scorecard_config(self) -> Dict[str, int]:
        """ÏõåÎü∞ Î≤ÑÌïè Ïä§ÏΩîÏñ¥Ïπ¥Îìú ÏÑ§Ï†ï Î∞òÌôò"""
        return self.settings.analysis_config['buffett_scorecard']
    
    def get_screening_criteria(self) -> Dict[str, float]:
        """Ïä§ÌÅ¨Î¶¨Îãù Í∏∞Ï§Ä Î∞òÌôò"""
        return self.settings.analysis_config['screening_criteria']
    
    def get_technical_indicators_config(self) -> Dict[str, Any]:
        """Í∏∞Ïà†Ï†Å ÏßÄÌëú ÏÑ§Ï†ï Î∞òÌôò"""
        return self.settings.analysis_config['technical_indicators']
    
    def get_notification_config(self) -> Dict[str, Any]:
        """ÏïåÎ¶º ÏÑ§Ï†ï Î∞òÌôò"""
        return self.settings.notification_config
    
    def is_development_mode(self) -> bool:
        """Í∞úÎ∞ú Î™®Îìú Ïó¨Î∂Ä Î∞òÌôò"""
        return self.settings.dev_config['development_mode']
    
    def is_debug_mode(self) -> bool:
        """ÎîîÎ≤ÑÍ∑∏ Î™®Îìú Ïó¨Î∂Ä Î∞òÌôò"""
        return self.settings.dev_config['debug_mode']
    
    def get_streamlit_config(self) -> Dict[str, Any]:
        """Streamlit ÏÑ§Ï†ï Î∞òÌôò"""
        return self.settings.app_config['streamlit']
    
    def update_config(self, section: str, key: str, value: Any):
        """ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏"""
        try:
            if section == 'analysis':
                if key in self.settings.analysis_config:
                    self.settings.analysis_config[key] = value
                    self.logger.info(f"Î∂ÑÏÑù ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏: {key} = {value}")
                else:
                    raise KeyError(f"Î∂ÑÏÑù ÏÑ§Ï†ïÏóê '{key}' ÌÇ§Í∞Ä ÏóÜÏäµÎãàÎã§.")
            
            elif section == 'app':
                if key in self.settings.app_config:
                    self.settings.app_config[key] = value
                    self.logger.info(f"Ïï± ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏: {key} = {value}")
                else:
                    raise KeyError(f"Ïï± ÏÑ§Ï†ïÏóê '{key}' ÌÇ§Í∞Ä ÏóÜÏäµÎãàÎã§.")
            
            else:
                raise ValueError(f"ÏßÄÏõêÌïòÏßÄ ÏïäÎäî ÏÑ§Ï†ï ÏÑπÏÖò: {section}")
                
        except Exception as e:
            self.logger.error(f"ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®: {e}")
            raise
    
    def export_config(self, file_path: Optional[str] = None) -> str:
        """ÏÑ§Ï†ïÏùÑ JSON ÌååÏùºÎ°ú ÎÇ¥Î≥¥ÎÇ¥Í∏∞"""
        import json
        from datetime import datetime
        
        if file_path is None:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            file_path = f"config_export_{timestamp}.json"
        
        config_data = {
            'timestamp': datetime.now().isoformat(),
            'project_root': str(self.project_root),
            'api_config': {
                'dart': {k: v for k, v in self.api_config.dart.items() if k != 'api_key'},
                'naver_news': {k: v for k, v in self.api_config.naver_news.items() if k not in ['client_id', 'client_secret']},
                'kis': {k: v for k, v in self.api_config.kis.items() if k not in ['app_key', 'app_secret', 'access_token']}
            },
            'database_config': {
                'base_path': str(self.database_config.base_path),
                'databases': {k: {'name': v['name'], 'description': v['description']} 
                            for k, v in self.database_config.databases.items()}
            },
            'analysis_config': self.settings.analysis_config,
            'app_config': self.settings.app_config,
            'validation_errors': self.validation_errors
        }
        
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(config_data, f, indent=2, ensure_ascii=False)
            
            self.logger.info(f"ÏÑ§Ï†ï ÎÇ¥Î≥¥ÎÇ¥Í∏∞ ÏôÑÎ£å: {file_path}")
            return file_path
            
        except Exception as e:
            self.logger.error(f"ÏÑ§Ï†ï ÎÇ¥Î≥¥ÎÇ¥Í∏∞ Ïã§Ìå®: {e}")
            raise

# Í∏ÄÎ°úÎ≤å ÏÑ§Ï†ï Í¥ÄÎ¶¨Ïûê Ïù∏Ïä§ÌÑ¥Ïä§
config_manager = ConfigManager()

# Ìé∏Ïùò Ìï®ÏàòÎì§
def get_config_manager() -> ConfigManager:
    """ÏÑ§Ï†ï Í¥ÄÎ¶¨Ïûê Î∞òÌôò"""
    return config_manager

def get_dart_config() -> Dict[str, Any]:
    """DART API ÏÑ§Ï†ï Î∞òÌôò"""
    return config_manager.get_dart_config()

def get_naver_news_config() -> Dict[str, Any]:
    """ÎÑ§Ïù¥Î≤Ñ Îâ¥Ïä§ API ÏÑ§Ï†ï Î∞òÌôò"""
    return config_manager.get_naver_news_config()

def get_kis_config() -> Dict[str, Any]:
    """KIS API ÏÑ§Ï†ï Î∞òÌôò"""
    return config_manager.get_kis_config()

def get_database_connection(db_name: str):
    """Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ Î∞òÌôò"""
    return config_manager.get_database_connection(db_name)

def get_logger(name: str):
    """Î°úÍ±∞ Î∞òÌôò"""
    return config_manager.get_logger(name)

def get_analysis_config() -> Dict[str, Any]:
    """Î∂ÑÏÑù ÏÑ§Ï†ï Î∞òÌôò"""
    return config_manager.get_analysis_config()

def initialize_project() -> bool:
    """ÌîÑÎ°úÏ†ùÌä∏ Ï¥àÍ∏∞Ìôî"""
    return config_manager.initialize_project()

def print_config_status():
    """ÏÑ§Ï†ï ÏÉÅÌÉú Ï∂úÎ†•"""
    config_manager.print_config_status()

def is_development_mode() -> bool:
    """Í∞úÎ∞ú Î™®Îìú Ïó¨Î∂Ä Î∞òÌôò"""
    return config_manager.is_development_mode()

def is_debug_mode() -> bool:
    """ÎîîÎ≤ÑÍ∑∏ Î™®Îìú Ïó¨Î∂Ä Î∞òÌôò"""
    return config_manager.is_debug_mode()

# Î™®Îìà Ï¥àÍ∏∞Ìôî Ïãú Ïã§Ìñâ
if __name__ == "__main__":
    print("üîß ÏÑ§Ï†ï Í¥ÄÎ¶¨Ïûê ÌÖåÏä§Ìä∏")
    print_config_status()
    
    # ÌîÑÎ°úÏ†ùÌä∏ Ï¥àÍ∏∞Ìôî ÌÖåÏä§Ìä∏
    print("\nüöÄ ÌîÑÎ°úÏ†ùÌä∏ Ï¥àÍ∏∞Ìôî ÌÖåÏä§Ìä∏...")
    success = initialize_project()
    
    if success:
        print("‚úÖ ÌîÑÎ°úÏ†ùÌä∏ Ï¥àÍ∏∞Ìôî ÏÑ±Í≥µ!")
    else:
        print("‚ùå ÌîÑÎ°úÏ†ùÌä∏ Ï¥àÍ∏∞Ìôî Ïã§Ìå®!")
        
    # ÏÑ§Ï†ï ÎÇ¥Î≥¥ÎÇ¥Í∏∞ ÌÖåÏä§Ìä∏
    print("\nüì§ ÏÑ§Ï†ï ÎÇ¥Î≥¥ÎÇ¥Í∏∞ ÌÖåÏä§Ìä∏...")
    try:
        export_file = config_manager.export_config()
        print(f"‚úÖ ÏÑ§Ï†ï ÎÇ¥Î≥¥ÎÇ¥Í∏∞ ÏÑ±Í≥µ: {export_file}")
    except Exception as e:
        print(f"‚ùå ÏÑ§Ï†ï ÎÇ¥Î≥¥ÎÇ¥Í∏∞ Ïã§Ìå®: {e}")
else:
    # Î™®Îìà Î°úÎìú Ïãú ÏûêÎèô Ï¥àÍ∏∞Ìôî
    if config_manager.validation_errors:
        print(f"‚ö†Ô∏è  ÏÑ§Ï†ï Í≤ÄÏ¶ù Ïã§Ìå®: {len(config_manager.validation_errors)}Í∞ú Ïò§Î•ò")
        for error in config_manager.validation_errors[:3]:  # Ï≤òÏùå 3Í∞úÎßå Ï∂úÎ†•
            print(f"  - {error}")
        if len(config_manager.validation_errors) > 3:
            print(f"  ... Î∞è {len(config_manager.validation_errors) - 3}Í∞ú Ï∂îÍ∞Ä Ïò§Î•ò")
    else:
        print("‚úÖ Finance Data Vibe ÏÑ§Ï†ï Î°úÎìú ÏôÑÎ£å")