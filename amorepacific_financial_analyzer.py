#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ÏïÑÎ™®Î†àÌçºÏãúÌîΩ Ïû¨Î¨¥Îç∞Ïù¥ÌÑ∞ Ï¢ÖÌï© Î∂ÑÏÑùÍ∏∞
==============================

Ï¢ÖÎ™©ÏΩîÎìúÎ•º ÏûÖÎ†•Î∞õÏïÑ Î™®Îì† Ïû¨Î¨¥ Í¥ÄÎ†® ÌÖåÏù¥Î∏îÏóêÏÑú Ìï¥Îãπ Ï¢ÖÎ™©Ïùò Îç∞Ïù¥ÌÑ∞Î•º 
Ï¢ÖÌï©Ï†ÅÏúºÎ°ú Ï°∞ÌöåÌïòÍ≥† Î∂ÑÏÑùÌï©ÎãàÎã§.

ÌäπÏßï:
- Î™®Îì† Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïùò Ïû¨Î¨¥ ÌÖåÏù¥Î∏î Í≤ÄÏÉâ
- Ï¢ÖÎ™©Î≥Ñ ÏÉÅÏÑ∏ Ïû¨Î¨¥ Îç∞Ïù¥ÌÑ∞ ÌëúÏãú
- ÏõåÎü∞ Î≤ÑÌïè Ïä§ÏΩîÏñ¥Ïπ¥Îìú Î∂ÑÏÑù
- ÏãúÍ≥ÑÏó¥ Îç∞Ïù¥ÌÑ∞ Ìä∏Î†åÎìú Î∂ÑÏÑù

Author: Finance Data Vibe Team
Created: 2025-07-20
"""

import sqlite3
import os
import sys
from pathlib import Path
from typing import Dict, List, Any, Optional, Tuple
import pandas as pd
from datetime import datetime
import json

class StockFinancialAnalyzer:
    """Ï¢ÖÎ™© Ïû¨Î¨¥Îç∞Ïù¥ÌÑ∞ Ï¢ÖÌï© Î∂ÑÏÑù ÌÅ¥ÎûòÏä§"""
    
    def __init__(self, db_path: str = None):
        """
        Ï¥àÍ∏∞Ìôî
        
        Args:
            db_path: Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÌååÏùºÎì§Ïù¥ ÏúÑÏπòÌïú Í≤ΩÎ°ú
        """
        if db_path is None:
            # ÌîÑÎ°úÏ†ùÌä∏ Î£®Ìä∏ÏóêÏÑú data/databases Í≤ΩÎ°ú ÏûêÎèô ÌÉêÏßÄ
            current_dir = Path(__file__).parent
            for _ in range(5):  # ÏµúÎåÄ 5Îã®Í≥Ñ ÏÉÅÏúÑ Ìè¥ÎçîÍπåÏßÄ ÌÉêÏÉâ
                db_path = current_dir / "data" / "databases"
                if db_path.exists():
                    break
                current_dir = current_dir.parent
            else:
                db_path = Path("data/databases")  # Í∏∞Î≥∏ Í≤ΩÎ°ú
        
        self.db_path = Path(db_path)
        
        # Ïû¨Î¨¥ Í¥ÄÎ†® ÌÇ§ÏõåÎìú Ï†ïÏùò
        self.financial_keywords = [
            'financial', 'dart', 'corp', 'company', 'samsung',
            'statements', 'balance', 'income', 'cash', 'ratios',
            'scorecard', 'buffett', 'fundamental'
        ]
        
        # ÏïåÎ†§ÏßÑ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÌååÏùºÎì§
        self.database_files = [
            'stock_data.db',
            'dart_data.db', 
            'buffett_scorecard.db',
            'news_data.db',
            'kis_data.db',
            'forecast_data.db',
            'yahoo_finance_data.db'
        ]
        
        # Ï¢ÖÎ™© Ï†ïÎ≥¥ Ï∫êÏãú
        self.stock_info_cache = {}
    
    def get_connection(self, db_file: str) -> Optional[sqlite3.Connection]:
        """Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞"""
        db_full_path = self.db_path / db_file
        if not db_full_path.exists():
            return None
        
        try:
            conn = sqlite3.connect(str(db_full_path))
            conn.row_factory = sqlite3.Row
            return conn
        except Exception as e:
            print(f"‚ùå Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ Ïã§Ìå® ({db_file}): {e}")
            return None
    
    def get_table_schema(self, conn: sqlite3.Connection, table_name: str) -> List[Dict[str, Any]]:
        """ÌÖåÏù¥Î∏î Ïä§ÌÇ§Îßà Ï†ïÎ≥¥ Ï°∞Ìöå"""
        try:
            cursor = conn.execute(f"PRAGMA table_info({table_name})")
            columns = []
            for row in cursor.fetchall():
                columns.append({
                    'name': row[1],
                    'type': row[2],
                    'notnull': bool(row[3]),
                    'default_value': row[4],
                    'pk': bool(row[5])
                })
            return columns
        except Exception as e:
            return []
    
    def is_financial_table(self, table_name: str) -> bool:
        """Ïû¨Î¨¥ Í¥ÄÎ†® ÌÖåÏù¥Î∏îÏù∏ÏßÄ ÌôïÏù∏"""
        table_lower = table_name.lower()
        return any(keyword in table_lower for keyword in self.financial_keywords)
    
    def find_stock_code_column(self, columns: List[str]) -> Optional[str]:
        """Ï¢ÖÎ™©ÏΩîÎìú Ïª¨Îüº Ï∞æÍ∏∞"""
        for col in columns:
            if col.lower() in ['stock_code', 'corp_code', 'symbol', 'ticker']:
                return col
        return None
    
    def get_company_basic_info(self, stock_code: str) -> Dict[str, Any]:
        """Í∏∞ÏóÖ Í∏∞Î≥∏ Ï†ïÎ≥¥ Ï°∞Ìöå"""
        if stock_code in self.stock_info_cache:
            return self.stock_info_cache[stock_code]
        
        company_info = {
            'stock_code': stock_code,
            'company_name': 'Unknown',
            'market_type': 'Unknown',
            'sector': 'Unknown',
            'industry': 'Unknown'
        }
        
        # stock_data.dbÏóêÏÑú Í∏∞ÏóÖ Ï†ïÎ≥¥ Ï°∞Ìöå
        conn = self.get_connection('stock_data.db')
        if conn:
            try:
                cursor = conn.execute("SELECT * FROM company_info WHERE stock_code = ?", (stock_code,))
                result = cursor.fetchone()
                if result:
                    company_info.update(dict(result))
            except:
                pass
            finally:
                conn.close()
        
        # dart_data.dbÏóêÏÑú Í∏∞ÏóÖ Ï†ïÎ≥¥ Ï°∞Ìöå
        conn = self.get_connection('dart_data.db')
        if conn:
            try:
                cursor = conn.execute("SELECT * FROM corp_codes WHERE stock_code = ?", (stock_code,))
                result = cursor.fetchone()
                if result:
                    company_info['corp_code'] = result['corp_code']
                    company_info['corp_name'] = result['corp_name']
                    if company_info['company_name'] == 'Unknown':
                        company_info['company_name'] = result['corp_name']
            except:
                pass
            finally:
                conn.close()
        
        self.stock_info_cache[stock_code] = company_info
        return company_info
    
    def format_financial_value(self, value: Any) -> str:
        """Ïû¨Î¨¥ ÏàòÏπòÎ•º Î≥¥Í∏∞ Ï¢ãÍ≤å Ìè¨Îß∑ÌåÖ"""
        if value is None:
            return "N/A"
        
        try:
            num_value = float(value)
            if abs(num_value) >= 1_000_000_000_000:  # Ï°∞ Îã®ÏúÑ
                return f"{num_value/1_000_000_000_000:,.1f}Ï°∞"
            elif abs(num_value) >= 100_000_000:  # Ïñµ Îã®ÏúÑ
                return f"{num_value/100_000_000:,.1f}Ïñµ"
            elif abs(num_value) >= 10_000:  # Îßå Îã®ÏúÑ
                return f"{num_value/10_000:,.1f}Îßå"
            elif abs(num_value) >= 1:
                return f"{num_value:,.1f}"
            else:
                return f"{num_value:.4f}"
        except:
            return str(value)
    
    def analyze_stock_financial_data(self, stock_code: str) -> Dict[str, Any]:
        """Ï¢ÖÎ™©Ïùò Î™®Îì† Ïû¨Î¨¥Îç∞Ïù¥ÌÑ∞ Ï¢ÖÌï© Î∂ÑÏÑù"""
        
        print(f"\nüè¢ {stock_code} Ï¢ÖÎ™© Ïû¨Î¨¥Îç∞Ïù¥ÌÑ∞ Ï¢ÖÌï© Î∂ÑÏÑù")
        print("=" * 100)
        
        # Í∏∞ÏóÖ Í∏∞Î≥∏ Ï†ïÎ≥¥ Ï°∞Ìöå
        company_info = self.get_company_basic_info(stock_code)
        print(f"üìã Í∏∞ÏóÖÎ™Ö: {company_info['company_name']}")
        print(f"üè∑Ô∏è  Ï¢ÖÎ™©ÏΩîÎìú: {stock_code}")
        if 'corp_code' in company_info:
            print(f"üèõÔ∏è  DART Í∏∞ÏóÖÏΩîÎìú: {company_info['corp_code']}")
        if company_info.get('sector') != 'Unknown':
            print(f"üè≠ ÏÑπÌÑ∞: {company_info['sector']}")
        
        all_results = {}
        total_records = 0
        tables_with_data = 0
        
        # Î™®Îì† Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Í≤ÄÏÉâ
        for db_file in self.database_files:
            print(f"\nüìä Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§: {db_file}")
            print("-" * 80)
            
            conn = self.get_connection(db_file)
            if not conn:
                print(f"   ‚ùå Ïó∞Í≤∞ Ïã§Ìå®")
                continue
            
            try:
                # Î™®Îì† ÌÖåÏù¥Î∏î Î™©Î°ù Ï°∞Ìöå
                cursor = conn.execute("SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'")
                all_tables = [row[0] for row in cursor.fetchall()]
                
                # Ïû¨Î¨¥ Í¥ÄÎ†® ÌÖåÏù¥Î∏î ÌïÑÌÑ∞ÎßÅ
                financial_tables = [table for table in all_tables if self.is_financial_table(table)]
                
                if not financial_tables:
                    print("   ‚≠ï Ïû¨Î¨¥ Í¥ÄÎ†® ÌÖåÏù¥Î∏î ÏóÜÏùå")
                    continue
                
                db_results = {}
                
                for table_name in financial_tables:
                    # ÌÖåÏù¥Î∏î Ïä§ÌÇ§Îßà ÌôïÏù∏
                    schema = self.get_table_schema(conn, table_name)
                    column_names = [col['name'] for col in schema]
                    
                    # Ï¢ÖÎ™©ÏΩîÎìú Ïª¨Îüº Ï∞æÍ∏∞
                    code_column = self.find_stock_code_column(column_names)
                    
                    if not code_column:
                        continue
                    
                    # Ìï¥Îãπ Ï¢ÖÎ™© Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
                    try:
                        cursor = conn.execute(f"SELECT COUNT(*) FROM {table_name} WHERE {code_column} = ?", (stock_code,))
                        count = cursor.fetchone()[0]
                        
                        if count > 0:
                            tables_with_data += 1
                            total_records += count
                            
                            print(f"   ‚úÖ {table_name}: {count}Í±¥")
                            
                            # Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
                            cursor = conn.execute(f"SELECT * FROM {table_name} WHERE {code_column} = ? ORDER BY ROWID", (stock_code,))
                            data = [dict(row) for row in cursor.fetchall()]
                            
                            # Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù
                            table_analysis = self.analyze_table_data(table_name, data, schema)
                            
                            db_results[table_name] = {
                                'count': count,
                                'data': data,
                                'analysis': table_analysis,
                                'schema': schema
                            }
                            
                            # ÏÉÅÏÑ∏ Îç∞Ïù¥ÌÑ∞ Ï∂úÎ†•
                            self.display_table_data(table_name, data, schema)
                    
                    except Exception as e:
                        print(f"   ‚ùå {table_name}: Ï°∞Ìöå Ïã§Ìå® ({e})")
                
                if db_results:
                    all_results[db_file] = db_results
                
            finally:
                conn.close()
        
        # Ï¢ÖÌï© Î∂ÑÏÑù Í≤∞Í≥º
        self.display_comprehensive_analysis(stock_code, all_results, total_records, tables_with_data)
        
        return all_results
    
    def analyze_table_data(self, table_name: str, data: List[Dict], schema: List[Dict]) -> Dict[str, Any]:
        """ÌÖåÏù¥Î∏î Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù"""
        if not data:
            return {'empty': True}
        
        analysis = {
            'record_count': len(data),
            'date_range': None,
            'key_metrics': {},
            'data_quality': {}
        }
        
        # ÎÇ†Ïßú Î≤îÏúÑ Î∂ÑÏÑù
        date_columns = [col['name'] for col in schema if 'date' in col['name'].lower() or col['name'] in ['year', 'bsns_year']]
        if date_columns and data:
            date_col = date_columns[0]
            dates = [row.get(date_col) for row in data if row.get(date_col)]
            if dates:
                analysis['date_range'] = {
                    'start': min(dates),
                    'end': max(dates),
                    'column': date_col
                }
        
        # Ïà´ÏûêÌòï Ïª¨Îüº ÌÜµÍ≥Ñ
        numeric_columns = [col['name'] for col in schema if col['type'].upper() in ['REAL', 'INTEGER']]
        for col in numeric_columns:
            values = [row.get(col) for row in data if row.get(col) is not None]
            if values:
                try:
                    numeric_values = [float(v) for v in values]
                    analysis['key_metrics'][col] = {
                        'count': len(numeric_values),
                        'min': min(numeric_values),
                        'max': max(numeric_values),
                        'avg': sum(numeric_values) / len(numeric_values) if numeric_values else 0
                    }
                except:
                    pass
        
        return analysis
    
    def display_table_data(self, table_name: str, data: List[Dict], schema: List[Dict]):
        """ÌÖåÏù¥Î∏î Îç∞Ïù¥ÌÑ∞ ÏÉÅÏÑ∏ Ï∂úÎ†•"""
        if not data:
            print(f"      üìã {table_name}: Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå")
            return
        
        print(f"\n      üìä {table_name} ÏÉÅÏÑ∏ Îç∞Ïù¥ÌÑ∞ ({len(data)}Í±¥)")
        print("      " + "‚îÄ" * 70)
        
        # ÌÖåÏù¥Î∏îÎ≥Ñ ÎßûÏ∂§ Ï∂úÎ†•
        if 'financial_statements' in table_name.lower():
            self.display_financial_statements(data)
        elif 'ratios' in table_name.lower() or 'scorecard' in table_name.lower():
            self.display_financial_ratios(data)
        elif 'corp_codes' in table_name.lower():
            self.display_corp_codes(data)
        elif 'company_info' in table_name.lower():
            self.display_company_info(data)
        elif 'stock_prices' in table_name.lower():
            self.display_stock_prices(data)
        else:
            self.display_generic_data(data)
    
    def display_financial_statements(self, data: List[Dict]):
        """Ïû¨Î¨¥Ï†úÌëú Îç∞Ïù¥ÌÑ∞ Ï∂úÎ†•"""
        print("      üìà Ïû¨Î¨¥Ï†úÌëú Îç∞Ïù¥ÌÑ∞:")
        
        # Ïó∞ÎèÑÎ≥ÑÎ°ú Í∑∏Î£πÌôî
        by_year = {}
        for row in data:
            year = row.get('bsns_year', row.get('year', 'Unknown'))
            if year not in by_year:
                by_year[year] = []
            by_year[year].append(row)
        
        for year in sorted(by_year.keys(), reverse=True):
            print(f"\n         üìÖ {year}ÎÖÑ:")
            year_data = by_year[year]
            
            # Ï£ºÏöî Í≥ÑÏ†ïÍ≥ºÎ™©Îßå ÌïÑÌÑ∞ÎßÅ
            important_accounts = [
                'Îß§Ï∂úÏï°', 'Îß§Ï∂úÏ¥ùÏù¥Ïùµ', 'ÏòÅÏóÖÏù¥Ïùµ', 'ÎãπÍ∏∞ÏàúÏù¥Ïùµ', 'Ï¥ùÏûêÏÇ∞', 'ÏûêÍ∏∞ÏûêÎ≥∏', 'Î∂ÄÏ±ÑÏ¥ùÍ≥Ñ',
                'Revenue', 'Operating Income', 'Net Income', 'Total Assets', 'Total Equity'
            ]
            
            important_data = []
            other_data = []
            
            for row in year_data:
                account_name = row.get('account_nm', '')
                if any(important in account_name for important in important_accounts):
                    important_data.append(row)
                else:
                    other_data.append(row)
            
            # Ï£ºÏöî Í≥ÑÏ†ïÍ≥ºÎ™© Î®ºÏ†Ä Ï∂úÎ†•
            for row in important_data:
                account_name = row.get('account_nm', 'N/A')
                current_amount = self.format_financial_value(row.get('thstrm_amount'))
                print(f"            üí∞ {account_name}: {current_amount}")
            
            # Í∏∞ÌÉÄ Í≥ÑÏ†ïÍ≥ºÎ™© (Ï≤òÏùå 5Í∞úÎßå)
            if other_data:
                print(f"            üìù Í∏∞ÌÉÄ {len(other_data)}Í∞ú Ìï≠Î™© (ÏÉÅÏúÑ 5Í∞ú):")
                for row in other_data[:5]:
                    account_name = row.get('account_nm', 'N/A')
                    current_amount = self.format_financial_value(row.get('thstrm_amount'))
                    print(f"               - {account_name}: {current_amount}")
                
                if len(other_data) > 5:
                    print(f"               ... Ïô∏ {len(other_data) - 5}Í∞ú Ìï≠Î™©")
    
    def display_financial_ratios(self, data: List[Dict]):
        """Ïû¨Î¨¥ÎπÑÏú® Îç∞Ïù¥ÌÑ∞ Ï∂úÎ†•"""
        print("      üèÜ Ïû¨Î¨¥ÎπÑÏú® Î∞è Ïä§ÏΩîÏñ¥:")
        
        for row in data:
            year = row.get('year', 'N/A')
            quarter = row.get('quarter', '')
            period_str = f"{year}ÎÖÑ" + (f" {quarter}Î∂ÑÍ∏∞" if quarter else "")
            
            print(f"\n         üìÖ {period_str}:")
            
            # ÏõåÎü∞ Î≤ÑÌïè Ïä§ÏΩîÏñ¥Ïπ¥Îìú
            if 'total_buffett_score' in row:
                total_score = row.get('total_buffett_score')
                if total_score:
                    print(f"            üéØ ÏõåÎü∞ Î≤ÑÌïè Ï¥ùÏ†ê: {total_score:.1f}/110Ï†ê")
                    
                    # ÏÑ∏Î∂Ä Ï†êÏàò
                    scores = [
                        ('ÏàòÏùµÏÑ±', row.get('profitability_score'), 30),
                        ('ÏÑ±Ïû•ÏÑ±', row.get('growth_score'), 25),
                        ('ÏïàÏ†ïÏÑ±', row.get('stability_score'), 25),
                        ('Ìö®Ïú®ÏÑ±', row.get('efficiency_score'), 10),
                        ('Í∞ÄÏπòÌèâÍ∞Ä', row.get('valuation_score'), 20)
                    ]
                    
                    for name, score, max_score in scores:
                        if score is not None:
                            percentage = (score / max_score * 100) if max_score > 0 else 0
                            print(f"               - {name}: {score:.1f}/{max_score}Ï†ê ({percentage:.1f}%)")
            
            # Ï£ºÏöî Ïû¨Î¨¥ÎπÑÏú®
            key_ratios = [
                ('ROE', row.get('roe'), '%'),
                ('ROA', row.get('roa'), '%'),
                ('Î∂ÄÏ±ÑÎπÑÏú®', row.get('debt_ratio'), '%'),
                ('Ïú†ÎèôÎπÑÏú®', row.get('current_ratio'), 'Î∞∞'),
                ('PER', row.get('per'), 'Î∞∞'),
                ('PBR', row.get('pbr'), 'Î∞∞'),
                ('Î∞∞ÎãπÏàòÏùµÎ•†', row.get('dividend_yield'), '%')
            ]
            
            print(f"            üìä Ï£ºÏöî Ïû¨Î¨¥ÎπÑÏú®:")
            for name, value, unit in key_ratios:
                if value is not None:
                    if unit == '%':
                        print(f"               - {name}: {value:.2f}%")
                    else:
                        print(f"               - {name}: {value:.2f}{unit}")
    
    def display_corp_codes(self, data: List[Dict]):
        """Í∏∞ÏóÖÏΩîÎìú Îç∞Ïù¥ÌÑ∞ Ï∂úÎ†•"""
        print("      üèõÔ∏è DART Í∏∞ÏóÖ Ï†ïÎ≥¥:")
        for row in data:
            corp_code = row.get('corp_code', 'N/A')
            corp_name = row.get('corp_name', 'N/A')
            stock_code = row.get('stock_code', 'N/A')
            print(f"         - Í∏∞ÏóÖÏΩîÎìú: {corp_code}")
            print(f"         - Í∏∞ÏóÖÎ™Ö: {corp_name}")
            print(f"         - Ï¢ÖÎ™©ÏΩîÎìú: {stock_code}")
    
    def display_company_info(self, data: List[Dict]):
        """Í∏∞ÏóÖÏ†ïÎ≥¥ Îç∞Ïù¥ÌÑ∞ Ï∂úÎ†•"""
        print("      üè¢ Í∏∞ÏóÖ Í∏∞Î≥∏ Ï†ïÎ≥¥:")
        for row in data:
            company_name = row.get('company_name', 'N/A')
            market_type = row.get('market_type', 'N/A')
            sector = row.get('sector', 'N/A')
            industry = row.get('industry', 'N/A')
            market_cap = row.get('market_cap')
            
            print(f"         - ÌöåÏÇ¨Î™Ö: {company_name}")
            print(f"         - ÏãúÏû•Íµ¨Î∂Ñ: {market_type}")
            print(f"         - ÏÑπÌÑ∞: {sector}")
            print(f"         - ÏóÖÏ¢Ö: {industry}")
            if market_cap:
                print(f"         - ÏãúÍ∞ÄÏ¥ùÏï°: {self.format_financial_value(market_cap)}Ïõê")
    
    def display_stock_prices(self, data: List[Dict]):
        """Ï£ºÍ∞Ä Îç∞Ïù¥ÌÑ∞ Ï∂úÎ†•"""
        print("      üìà Ï£ºÍ∞Ä Îç∞Ïù¥ÌÑ∞ (ÏµúÍ∑º 10Ïùº):")
        
        # ÎÇ†Ïßú Í∏∞Ï§Ä Ï†ïÎ†¨
        sorted_data = sorted(data, key=lambda x: x.get('date', ''), reverse=True)
        
        for row in sorted_data[:10]:
            date = row.get('date', 'N/A')
            close_price = row.get('close_price')
            volume = row.get('volume')
            change = ""
            
            if close_price:
                close_str = f"{close_price:,.0f}Ïõê"
            else:
                close_str = "N/A"
            
            if volume:
                volume_str = f"Í±∞ÎûòÎüâ {volume:,}Ï£º"
            else:
                volume_str = ""
            
            print(f"         - {date}: {close_str} {volume_str}")
    
    def display_generic_data(self, data: List[Dict]):
        """ÏùºÎ∞ò Îç∞Ïù¥ÌÑ∞ Ï∂úÎ†•"""
        print("      üìÑ Îç∞Ïù¥ÌÑ∞ ÎÇ¥Ïö©:")
        for i, row in enumerate(data[:5], 1):
            # Ï£ºÏöî Ïª¨ÎüºÎßå ÌëúÏãú
            key_data = {}
            for key, value in row.items():
                if key.lower() in ['id', 'date', 'year', 'amount', 'value', 'score', 'name']:
                    key_data[key] = value
                if len(key_data) >= 4:
                    break
            
            print(f"         {i}. {key_data}")
        
        if len(data) > 5:
            print(f"         ... Ïô∏ {len(data) - 5}Í±¥")
    
    def display_comprehensive_analysis(self, stock_code: str, all_results: Dict, total_records: int, tables_with_data: int):
        """Ï¢ÖÌï© Î∂ÑÏÑù Í≤∞Í≥º Ï∂úÎ†•"""
        
        print(f"\nüìã {stock_code} Ïû¨Î¨¥Îç∞Ïù¥ÌÑ∞ Ï¢ÖÌï© Î∂ÑÏÑù Í≤∞Í≥º")
        print("=" * 100)
        
        print(f"üìä Îç∞Ïù¥ÌÑ∞ ÏàòÏßë ÌòÑÌô©:")
        print(f"   - Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÎäî ÌÖåÏù¥Î∏î: {tables_with_data}Í∞ú")
        print(f"   - Ï¥ù Î†àÏΩîÎìú Ïàò: {total_records:,}Í±¥")
        
        # Îç∞Ïù¥ÌÑ∞ ÏôÑÏ†ÑÏÑ± ÌèâÍ∞Ä
        completeness_score = 0
        if any('financial_statements' in str(results) for results in all_results.values()):
            completeness_score += 30
        if any('ratios' in str(results) or 'scorecard' in str(results) for results in all_results.values()):
            completeness_score += 25
        if any('company_info' in str(results) for results in all_results.values()):
            completeness_score += 20
        if any('stock_prices' in str(results) for results in all_results.values()):
            completeness_score += 25
        
        print(f"\nüìà Îç∞Ïù¥ÌÑ∞ ÏôÑÏ†ÑÏÑ± ÌèâÍ∞Ä: {completeness_score}/100Ï†ê")
        
        if completeness_score >= 80:
            print(f"   ‚úÖ Ïö∞Ïàò - Ï¢ÖÌï©Ï†ÅÏù∏ Ïû¨Î¨¥Î∂ÑÏÑùÏù¥ Í∞ÄÎä•Ìï©ÎãàÎã§")
        elif completeness_score >= 60:
            print(f"   üü° Î≥¥ÌÜµ - Í∏∞Î≥∏Ï†ÅÏù∏ Ïû¨Î¨¥Î∂ÑÏÑùÏù¥ Í∞ÄÎä•Ìï©ÎãàÎã§")
        elif completeness_score >= 40:
            print(f"   üü† Î∂ÄÏ°± - ÏùºÎ∂Ä Ïû¨Î¨¥Î∂ÑÏÑùÎßå Í∞ÄÎä•Ìï©ÎãàÎã§")
        else:
            print(f"   üî¥ ÎØ∏Ìù° - Ï∂îÍ∞Ä Îç∞Ïù¥ÌÑ∞ ÏàòÏßëÏù¥ ÌïÑÏöîÌï©ÎãàÎã§")
        
        # Í∂åÏû•ÏÇ¨Ìï≠
        print(f"\nüí° Î∂ÑÏÑù Í≤∞Í≥º Î∞è Í∂åÏû•ÏÇ¨Ìï≠:")
        
        missing_data = []
        if not any('financial_statements' in str(results) for results in all_results.values()):
            missing_data.append("DART Ïû¨Î¨¥Ï†úÌëú Îç∞Ïù¥ÌÑ∞")
        if not any('ratios' in str(results) or 'scorecard' in str(results) for results in all_results.values()):
            missing_data.append("Ïû¨Î¨¥ÎπÑÏú® Î∞è ÏõåÎü∞ Î≤ÑÌïè Ïä§ÏΩîÏñ¥")
        if not any('stock_prices' in str(results) for results in all_results.values()):
            missing_data.append("Ï£ºÍ∞Ä Îç∞Ïù¥ÌÑ∞")
        
        if missing_data:
            print(f"   üî¥ Î∂ÄÏ°±Ìïú Îç∞Ïù¥ÌÑ∞: {', '.join(missing_data)}")
            print(f"   üìù Í∂åÏû• Ïï°ÏÖò:")
            if "DART Ïû¨Î¨¥Ï†úÌëú Îç∞Ïù¥ÌÑ∞" in missing_data:
                print(f"      - python scripts/data_collection/collect_dart_data.py")
            if "Ïû¨Î¨¥ÎπÑÏú® Î∞è ÏõåÎü∞ Î≤ÑÌïè Ïä§ÏΩîÏñ¥" in missing_data:
                print(f"      - python scripts/analysis/calculate_buffett_score.py --stock_code={stock_code}")
            if "Ï£ºÍ∞Ä Îç∞Ïù¥ÌÑ∞" in missing_data:
                print(f"      - python scripts/data_collection/collect_stock_data.py --stock_code={stock_code}")
        else:
            print(f"   ‚úÖ Î™®Îì† ÌïµÏã¨ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏàòÏßëÎêòÏóàÏäµÎãàÎã§!")
            print(f"   üöÄ Îã§Ïùå Îã®Í≥Ñ: Ïõπ Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ÏóêÏÑú Ï¢ÖÌï© Î∂ÑÏÑù Í≤∞Í≥º ÌôïÏù∏")

def main():
    """Î©îÏù∏ Ìï®Ïàò"""
    print("üè¶ Finance Data Vibe - Ï¢ÖÎ™© Ïû¨Î¨¥Îç∞Ïù¥ÌÑ∞ Ï¢ÖÌï© Î∂ÑÏÑùÍ∏∞")
    print("=" * 100)
    
    # Î™ÖÎ†πÌñâ Ïù∏ÏàòÎ°ú Ï¢ÖÎ™©ÏΩîÎìúÍ∞Ä Ï†úÍ≥µÎêú Í≤ΩÏö∞
    if len(sys.argv) > 1:
        stock_code = sys.argv[1]
    else:
        # ÏÇ¨Ïö©Ïûê ÏûÖÎ†• Î∞õÍ∏∞ (Í∏∞Î≥∏Í∞í: ÏïÑÎ™®Î†àÌçºÏãúÌîΩ)
        default_code = "090430"
        user_input = input(f"üìù Ï¢ÖÎ™©ÏΩîÎìúÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî (Í∏∞Î≥∏Í∞í: {default_code} - ÏïÑÎ™®Î†àÌçºÏãúÌîΩ): ").strip()
        stock_code = user_input if user_input else default_code
    
    if not stock_code:
        print("‚ùå Ï¢ÖÎ™©ÏΩîÎìúÍ∞Ä ÏûÖÎ†•ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.")
        return
    
    # Ï¢ÖÎ™©ÏΩîÎìú ÌòïÏãù Í≤ÄÏ¶ù (6ÏûêÎ¶¨ Ïà´Ïûê)
    if not stock_code.isdigit() or len(stock_code) != 6:
        print("‚ùå Ïò¨Î∞îÎ•∏ Ï¢ÖÎ™©ÏΩîÎìú ÌòïÏãùÏù¥ ÏïÑÎãôÎãàÎã§. (6ÏûêÎ¶¨ Ïà´Ïûê)")
        return
    
    # ÏïÑÎ™®Î†àÌçºÏãúÌîΩ Ï†ïÎ≥¥ Ï∂úÎ†•
    if stock_code == "090430":
        print("üéØ Î∂ÑÏÑù ÎåÄÏÉÅ: ÏïÑÎ™®Î†àÌçºÏãúÌîΩ (090430)")
        print("   - ÌôîÏû•Ìíà Î∞è ÏÉùÌôúÏö©Ìíà Ï†úÏ°∞ÏóÖ")
        print("   - KOSPI ÏÉÅÏû•")
        print("   - ÎåÄÌëú Î∏åÎûúÎìú: ÏÑ§ÌôîÏàò, ÎùºÎÑ§Ï¶à, ÎßàÎ™ΩÎìú, Ïù¥ÎãàÏä§ÌîÑÎ¶¨ Îì±")
    
    # Ïû¨Î¨¥Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù Ïã§Ìñâ
    analyzer = StockFinancialAnalyzer()
    
    try:
        results = analyzer.analyze_stock_financial_data(stock_code)
        
        # Í≤∞Í≥º Ï†ÄÏû• ÏòµÏÖò
        save_option = input(f"\nüíæ Î∂ÑÏÑù Í≤∞Í≥ºÎ•º JSON ÌååÏùºÎ°ú Ï†ÄÏû•ÌïòÏãúÍ≤†ÏäµÎãàÍπå? (y/N): ").lower()
        if save_option == 'y':
            output_file = f"{stock_code}_financial_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            
            # JSON ÏßÅÎ†¨ÌôîÎ•º ÏúÑÌïú Îç∞Ïù¥ÌÑ∞ Î≥ÄÌôò
            json_results = {}
            for db_name, db_data in results.items():
                json_results[db_name] = {}
                for table_name, table_data in db_data.items():
                    json_results[db_name][table_name] = {
                        'count': table_data['count'],
                        'data': table_data['data'],
                        'analysis': table_data['analysis']
                    }
            
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(json_results, f, ensure_ascii=False, indent=2, default=str)
            
            print(f"‚úÖ Î∂ÑÏÑù Í≤∞Í≥ºÍ∞Ä {output_file}Ïóê Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.")
        
        print(f"\n‚úÖ {stock_code} Ï¢ÖÎ™© Ïû¨Î¨¥Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù ÏôÑÎ£å!")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  ÏÇ¨Ïö©ÏûêÏóê ÏùòÌï¥ Ï§ëÎã®ÎêòÏóàÏäµÎãàÎã§.")
    except Exception as e:
        print(f"\n‚ùå Ïò§Î•ò Î∞úÏÉù: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()