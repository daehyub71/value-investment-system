#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ÏóêÏÑú Ï†ïÌôïÌïú ÏÇºÏÑ±Ï†ÑÏûê Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
"""

import sqlite3
import pandas as pd
from pathlib import Path
import sys
import os

def check_real_samsung_data():
    """Ïã§Ï†ú DBÏóêÏÑú ÏÇºÏÑ±Ï†ÑÏûê Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏"""
    
    print("üîç Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ÏóêÏÑú ÏÇºÏÑ±Ï†ÑÏûê Ï†ïÌôïÌïú Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏")
    print("=" * 60)
    
    # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Í≤ΩÎ°ú
    db_path = Path("data/databases")
    
    if not db_path.exists():
        print(f"‚ùå Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÎîîÎ†âÌÜ†Î¶¨Í∞Ä ÏóÜÏäµÎãàÎã§: {db_path}")
        return None
    
    results = {}
    
    # 1. DART Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
    print("\nüìä 1. DART Í≥µÏãú Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÌôïÏù∏")
    print("-" * 40)
    
    try:
        dart_db_path = db_path / "dart_data.db"
        if not dart_db_path.exists():
            print(f"‚ùå DART DB ÌååÏùºÏù¥ ÏóÜÏäµÎãàÎã§: {dart_db_path}")
        else:
            dart_db = sqlite3.connect(dart_db_path)
            
            # ÌÖåÏù¥Î∏î Î™©Î°ù ÌôïÏù∏
            tables_query = "SELECT name FROM sqlite_master WHERE type='table'"
            tables = pd.read_sql(tables_query, dart_db)
            
            print(f"üìã DART DB ÌÖåÏù¥Î∏î Î™©Î°ù ({len(tables)}Í∞ú):")
            for table_name in tables['name']:
                try:
                    count_query = f"SELECT COUNT(*) as count FROM [{table_name}]"
                    count = pd.read_sql(count_query, dart_db)['count'][0]
                    print(f"  ‚úÖ {table_name}: {count:,}Í±¥")
                    
                    # ÌÖåÏù¥Î∏î Íµ¨Ï°∞ ÌôïÏù∏
                    if count > 0:
                        structure_query = f"PRAGMA table_info([{table_name}])"
                        structure = pd.read_sql(structure_query, dart_db)
                        columns = structure['name'].tolist()
                        print(f"     Ïª¨Îüº: {', '.join(columns[:5])}{'...' if len(columns) > 5 else ''}")
                        
                        # ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
                        sample_query = f"SELECT * FROM [{table_name}] LIMIT 3"
                        sample_data = pd.read_sql(sample_query, dart_db)
                        
                        # ÏÇºÏÑ±Ï†ÑÏûê Í¥ÄÎ†® Îç∞Ïù¥ÌÑ∞ Í≤ÄÏÉâ
                        samsung_found = False
                        for col in columns:
                            if any(keyword in col.lower() for keyword in ['code', 'corp', 'name']):
                                try:
                                    if 'code' in col.lower():
                                        search_query = f"SELECT * FROM [{table_name}] WHERE [{col}] LIKE '%005930%' OR [{col}] LIKE '%00593%' LIMIT 5"
                                    else:
                                        search_query = f"SELECT * FROM [{table_name}] WHERE [{col}] LIKE '%ÏÇºÏÑ±Ï†ÑÏûê%' OR [{col}] LIKE '%Samsung%' LIMIT 5"
                                    
                                    samsung_data = pd.read_sql(search_query, dart_db)
                                    if not samsung_data.empty:
                                        print(f"     üéØ ÏÇºÏÑ±Ï†ÑÏûê Îç∞Ïù¥ÌÑ∞ Î∞úÍ≤¨! ({len(samsung_data)}Í±¥)")
                                        print(f"        {samsung_data.iloc[0].to_dict()}")
                                        samsung_found = True
                                        results[f'dart_{table_name}'] = samsung_data
                                        break
                                except Exception as e:
                                    continue
                        
                        if not samsung_found and count < 100:  # ÏûëÏùÄ ÌÖåÏù¥Î∏îÎßå Ï†ÑÏ≤¥ Í≤ÄÏÉâ
                            print(f"     üìã ÏÉòÌîå Îç∞Ïù¥ÌÑ∞: {sample_data.iloc[0].to_dict() if not sample_data.empty else 'None'}")
                        
                except Exception as e:
                    print(f"  ‚ùå {table_name} ÌÖåÏù¥Î∏î Ï°∞Ìöå Ïã§Ìå®: {e}")
            
            dart_db.close()
            
    except Exception as e:
        print(f"‚ùå DART DB Ï†ëÍ∑º Ïã§Ìå®: {e}")
    
    # 2. Ï£ºÏãù Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
    print("\nüìä 2. Ï£ºÏãù Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÌôïÏù∏")
    print("-" * 40)
    
    try:
        stock_db_path = db_path / "stock_data.db"
        if not stock_db_path.exists():
            print(f"‚ùå Ï£ºÏãù DB ÌååÏùºÏù¥ ÏóÜÏäµÎãàÎã§: {stock_db_path}")
        else:
            stock_db = sqlite3.connect(stock_db_path)
            
            # ÌÖåÏù¥Î∏î Î™©Î°ù ÌôïÏù∏
            tables_query = "SELECT name FROM sqlite_master WHERE type='table'"
            tables = pd.read_sql(tables_query, stock_db)
            
            print(f"üìã Ï£ºÏãù DB ÌÖåÏù¥Î∏î Î™©Î°ù ({len(tables)}Í∞ú):")
            for table_name in tables['name']:
                try:
                    count_query = f"SELECT COUNT(*) as count FROM [{table_name}]"
                    count = pd.read_sql(count_query, stock_db)['count'][0]
                    print(f"  ‚úÖ {table_name}: {count:,}Í±¥")
                    
                    if count > 0:
                        # ÌÖåÏù¥Î∏î Íµ¨Ï°∞ ÌôïÏù∏
                        structure_query = f"PRAGMA table_info([{table_name}])"
                        structure = pd.read_sql(structure_query, stock_db)
                        columns = structure['name'].tolist()
                        print(f"     Ïª¨Îüº: {', '.join(columns[:7])}{'...' if len(columns) > 7 else ''}")
                        
                        # ÏÇºÏÑ±Ï†ÑÏûê Îç∞Ïù¥ÌÑ∞ Í≤ÄÏÉâ
                        samsung_found = False
                        for col in columns:
                            if any(keyword in col.lower() for keyword in ['code', 'symbol', 'name', 'corp']):
                                try:
                                    if 'code' in col.lower() or 'symbol' in col.lower():
                                        search_query = f"SELECT * FROM [{table_name}] WHERE [{col}] = '005930' OR [{col}] = 'KS005930' OR [{col}] LIKE '%005930%' LIMIT 5"
                                    else:
                                        search_query = f"SELECT * FROM [{table_name}] WHERE [{col}] LIKE '%ÏÇºÏÑ±Ï†ÑÏûê%' OR [{col}] LIKE '%Samsung%' LIMIT 5"
                                    
                                    samsung_data = pd.read_sql(search_query, stock_db)
                                    if not samsung_data.empty:
                                        print(f"     üéØ ÏÇºÏÑ±Ï†ÑÏûê Îç∞Ïù¥ÌÑ∞ Î∞úÍ≤¨! ({len(samsung_data)}Í±¥)")
                                        
                                        # ÏµúÏã† Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
                                        if 'date' in ' '.join(columns).lower():
                                            date_cols = [c for c in columns if 'date' in c.lower() or 'time' in c.lower()]
                                            if date_cols:
                                                latest_query = f"SELECT * FROM [{table_name}] WHERE [{col}] = '005930' ORDER BY [{date_cols[0]}] DESC LIMIT 3"
                                                latest_data = pd.read_sql(latest_query, stock_db)
                                                print(f"     üìÖ ÏµúÏã† Îç∞Ïù¥ÌÑ∞:")
                                                for _, row in latest_data.iterrows():
                                                    print(f"        {row.to_dict()}")
                                        else:
                                            print(f"        {samsung_data.iloc[0].to_dict()}")
                                        
                                        samsung_found = True
                                        results[f'stock_{table_name}'] = samsung_data
                                        break
                                except Exception as e:
                                    continue
                        
                        if not samsung_found and count < 50:  # ÏûëÏùÄ ÌÖåÏù¥Î∏îÎßå ÏÉòÌîå Ï°∞Ìöå
                            sample_query = f"SELECT * FROM [{table_name}] LIMIT 2"
                            sample_data = pd.read_sql(sample_query, stock_db)
                            print(f"     üìã ÏÉòÌîå Îç∞Ïù¥ÌÑ∞: {sample_data.iloc[0].to_dict() if not sample_data.empty else 'None'}")
                        
                except Exception as e:
                    print(f"  ‚ùå {table_name} ÌÖåÏù¥Î∏î Ï°∞Ìöå Ïã§Ìå®: {e}")
            
            stock_db.close()
            
    except Exception as e:
        print(f"‚ùå Ï£ºÏãù DB Ï†ëÍ∑º Ïã§Ìå®: {e}")
    
    # 3. Í≤∞Í≥º ÏöîÏïΩ
    print("\nüéØ 3. ÏÇºÏÑ±Ï†ÑÏûê Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ Î∞úÍ≤¨ Í≤∞Í≥º")
    print("-" * 40)
    
    if results:
        print(f"‚úÖ Ï¥ù {len(results)}Í∞ú ÌÖåÏù¥Î∏îÏóêÏÑú ÏÇºÏÑ±Ï†ÑÏûê Îç∞Ïù¥ÌÑ∞ Î∞úÍ≤¨:")
        for key, data in results.items():
            print(f"  üìä {key}: {len(data)}Í±¥")
            
            # Ïû¨Î¨¥ Í¥ÄÎ†® Ïª¨ÎüºÏù¥ ÏûàÎäîÏßÄ ÌôïÏù∏
            financial_keywords = ['revenue', 'income', 'asset', 'equity', 'debt', 'profit', 'sales', 'earning']
            financial_cols = [col for col in data.columns if any(keyword in col.lower() for keyword in financial_keywords)]
            
            if financial_cols:
                print(f"     üí∞ Ïû¨Î¨¥ Í¥ÄÎ†® Ïª¨Îüº: {', '.join(financial_cols[:5])}")
                
                # Ïã§Ï†ú Ïû¨Î¨¥ Îç∞Ïù¥ÌÑ∞ ÌëúÏãú
                if not data.empty:
                    latest_row = data.iloc[0]
                    financial_data = {}
                    for col in financial_cols[:10]:  # ÏµúÎåÄ 10Í∞ú Ïª¨Îüº
                        value = latest_row[col]
                        if pd.notna(value) and str(value).strip():
                            financial_data[col] = value
                    
                    if financial_data:
                        print(f"     üìà Ïã§Ï†ú Ïû¨Î¨¥ Îç∞Ïù¥ÌÑ∞:")
                        for key, value in financial_data.items():
                            print(f"        {key}: {value}")
        
        return results
    else:
        print("‚ùå ÏÇºÏÑ±Ï†ÑÏûê Îç∞Ïù¥ÌÑ∞Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
        print("üí° Í∞ÄÎä•Ìïú ÏõêÏù∏:")
        print("  1. Îç∞Ïù¥ÌÑ∞Í∞Ä ÏïÑÏßÅ ÏàòÏßëÎêòÏßÄ ÏïäÏùå")
        print("  2. Îã§Î•∏ Ï¢ÖÎ™©ÏΩîÎìúÎÇò ÌòïÏãùÏúºÎ°ú Ï†ÄÏû•Îê®")
        print("  3. ÌÖåÏù¥Î∏î Íµ¨Ï°∞Í∞Ä ÏòàÏÉÅÍ≥º Îã§Î¶Ñ")
        return None

if __name__ == "__main__":
    try:
        results = check_real_samsung_data()
        
        if results:
            print(f"\nüéâ Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏ ÏôÑÎ£å!")
            print(f"üìä Ïù¥Ï†ú Ï†ïÌôïÌïú Îç∞Ïù¥ÌÑ∞Î°ú ÏõåÎü∞ Î≤ÑÌïè Ïä§ÏΩîÏñ¥Ïπ¥ÎìúÎ•º Îã§Ïãú Í≥ÑÏÇ∞Ìï† Ïàò ÏûàÏäµÎãàÎã§.")
        else:
            print(f"\n‚ö†Ô∏è Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Î•º Ï∞æÏßÄ Î™ªÌñàÏäµÎãàÎã§.")
            print(f"üîß DART API Îç∞Ïù¥ÌÑ∞ ÏàòÏßëÏù¥ Î®ºÏ†Ä ÌïÑÏöîÌï† Ïàò ÏûàÏäµÎãàÎã§.")
            
    except Exception as e:
        print(f"‚ùå Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ Ï§ë Ïò§Î•ò: {e}")
        import traceback
        traceback.print_exc()
